chisq.test
?chisq.test
x <- readRDS(url("https://github.com/datasciencelabs/2022/blob/master/data/digits_st.RDS"))
# sample a few* letters many times:
n <- 10000
# * "a few" ~ Pois(2)
ntimes <- rpois(n, lambda = 2)
n <- 50
# * "a few" ~ Pois(2)
ntimes <- rpois(n, lambda = 2)
ntimes
sampfun <- function(t){
sample(letters, t)
}
letters
sampfun(n)
sampfun(ntimes)
ntimes
Vectorize(sampfun)
sampfun <- function(t){
sample(letters, t)
}
Vectorize(sampfun)
?Vectorize
vsampfun <- Vectorize(sampfun)
vsample <- Vectorize(sample, vectorize.args = "size")
vsample
require(microbenchmark)
microbenchmark({
s1 <- sapply(ntimes, sampfun)
})
microbenchmark({
s2 <- vsampfun(ntimes)
})
microbenchmark({
s3 <- vsample(letters, ntimes)
})
microbenchmark({
s4 <- purrr::map(ntimes, sampfun)
})
s1
x <- data.frame(ntimes = rpois(n, lambda = 2), s = NA)
x <- data.frame(ntimes = rpois(n, lambda = 2))
x |> mutate(s = paste0(sample(letters, ntimes), collapse = ""))
library(dplyr)
x <- data.frame(ntimes = rpois(n, lambda = 2))
x |> mutate(s = paste0(sample(letters, ntimes), collapse = ""))
x |> mutate(s = paste0(sample(ntimes, letters), collapse = ""))
x <- data.frame(ntimes = rpois(n, lambda = 2))
head(x)
?sample
paste0(sample(letters, ntimes), collapse = "")
paste0(sample(letters, ntimes[i]), collapse = "")
paste0(sample(letters, ntimes[1]), collapse = "")
?mapply(function, ...)
?mapply
?purrr::map(ntimes, sampfun)
s1
sampfun2 <- function(t){
paste0(sample(letters, t), collapse = "")
}
vsampfun2 <- Vectorize(sampfun2)
x |> mutate(s = vsampfun2(ntimes))
s5 <- vsampfun2(ntimes)
s5
microbenchmark({
s5 <- vsampfun2(ntimes)
})
mbm <- microbenchmark(
s1 = sapply(ntimes, sampfun),
s2 = vsampfun(ntimes),
s3 = vsample(letters, ntimes),
s4 = purrr::map(ntimes, sampfun),
s5 = vsampfun2(ntimes),
times = 1000
)
mbm
# sample a few* letters many times:
n <- 10000
# * "a few" ~ Pois(2)
ntimes <- rpois(n, lambda = 2)
mbm <- microbenchmark(
s1 = sapply(ntimes, sampfun),
s2 = vsampfun(ntimes),
s3 = vsample(letters, ntimes),
s4 = purrr::map(ntimes, sampfun),
s5 = vsampfun2(ntimes),
times = 10000
)
mbm
purr::map(ntimes, sampfun2)
purrr::map(ntimes, sampfun2)
mbm <- microbenchmark(
s1 = sapply(ntimes, sampfun),
s2 = vsampfun(ntimes),
s3 = vsample(letters, ntimes),
s4 = purrr::map(ntimes, sampfun),
s5 = vsampfun2(ntimes),
s6 = as.data.frame(ntimes) |> mutate(s = purrr::map(ntimes, sampfun2))
times = 1000
mbm <- microbenchmark(
s1 = sapply(ntimes, sampfun),
s2 = vsampfun(ntimes),
s3 = vsample(letters, ntimes),
s4 = purrr::map(ntimes, sampfun),
s5 = vsampfun2(ntimes),
s6 = as.data.frame(ntimes) %>% mutate(s = purrr::map(ntimes, sampfun2))
times = 1000
as.data.frame(ntimes)
sampfun2 <- function(t){
paste0(sample(letters, t), collapse = "")
}
as.data.frame(ntimes) %>% mutate(s = map(ntimes, sampfun2))
library(purrr)
as.data.frame(ntimes) %>% mutate(s = map(ntimes, sampfun2))
mbm <- microbenchmark(
s1 = sapply(ntimes, sampfun),
s2 = vsampfun(ntimes),
s3 = vsample(letters, ntimes),
s4 = purrr::map(ntimes, sampfun),
s5 = vsampfun2(ntimes),
s6 = as.data.frame(ntimes) %>% mutate(s = map(ntimes, sampfun2))
times = 1000
mbm <- microbenchmark(
s1 = sapply(ntimes, sampfun),
s2 = vsampfun(ntimes),
s3 = vsample(letters, ntimes),
s4 = purrr::map(ntimes, sampfun),
s5 = vsampfun2(ntimes),
s6 = as.data.frame(ntimes) %>% mutate(s = map(ntimes, sampfun2)),
times = 1000
)
# sample a few* letters many times:
n <- 1000
mbm <- microbenchmark(
s1 = sapply(ntimes, sampfun),
s2 = vsampfun(ntimes),
s3 = vsample(letters, ntimes),
s4 = purrr::map(ntimes, sampfun),
s5 = vsampfun2(ntimes),
s6 = as.data.frame(ntimes) %>% mutate(s = map(ntimes, sampfun2)),
times = 1000
)
mbm <- microbenchmark(
s1 = sapply(ntimes, sampfun),
s2 = vsampfun(ntimes),
s3 = vsample(letters, ntimes),
s4 = purrr::map(ntimes, sampfun),
s5 = vsampfun2(ntimes),
s6 = as.data.frame(ntimes) %>% mutate(s = map(ntimes, sampfun2)),
times = 100
)
mbm
?microbenchmark
print(mbm)
log2(0.063131)
:Q!:q1
bundle exec jekyll build
install.packages("blogdown")
C:/Users/jflun/Dropbox/github_webpage/_posts/posts.htmlblogdown::serve_site()
blogdown::serve_site()
blogdown::install_hugo()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
install.packages("rstudioapi")
install.packages("flexdashboard")
library(EZtune)
?eztune
library(EZtune)
library(mlbench)
data(Sonar)
sonar <- Sonar[sample(1:nrow(Sonar), 100), ]
y <- sonar[, 61]
x <- sonar[, 1:10]
# Optimize an SVM using the default fast setting and Hooke-Jeeves
m1 <- eztune(x, y)
m1$accuracy
# Compute the 10-fold cross-validation accuracy for the model
eztune_cv(x, y, m1)
m1
library(EZtune)
library(mlbench)
data(Sonar)
sonar <- Sonar[sample(1:nrow(Sonar), 100), ]
y <- sonar[, 61]
x <- sonar[, 1:10]
# Optimize an SVM using the default fast setting and Hooke-Jeeves
m1 <- eztune(x, y)
m1$loss
# Compute the 10-fold cross-validation accuracy for the model
eztune_cv(x, y, m1)
# Optimize GBM using training set of 50 observations and Hooke-Jeeves
m2 <- eztune(x, y, method = "gbm", fast = 50)
m2$loss
# Compute the 10-fold cross-validation accuracy for the model
eztune_cv(x, y, m2)
# Optimize SVM with 25% of the observations as a training dataset
# using a genetic algorithm
m3 <- eztune(x, y, method = "svm", optimizer = "ga", fast = 0.25)
m3$loss
# Compute the 10-fold cross-validation accuracy for the model
eztune_cv(x, y, m3)
library(postcards)
?create_postcard
create_postcard("test.rmd", template = "trestles")
rmarkdown::pandoc_version()
rmarkdown::find_pandoc(cache = FALSE)
library(rlang)
install.packages(c("blob", "caret", "cli", "commonmark", "dbplyr", "dplyr", "dtplyr", "FNN", "gdtools", "ggfortify", "googledrive", "gtable", "hexbin", "hms", "htmlwidgets", "insight", "modelr", "partykit", "pillar", "ps", "rlang", "servr", "sf", "survival", "testthat", "tibble", "truncnorm", "vctrs", "wk", "XML"))
install.packages(c("blob", "caret", "cli", "commonmark", "dbplyr", "dplyr", "dtplyr", "FNN", "gdtools", "ggfortify", "googledrive", "gtable", "hexbin", "hms", "htmlwidgets", "insight", "modelr", "partykit", "pillar", "ps", "rlang", "servr", "sf", "survival", "testthat", "tibble", "truncnorm", "vctrs", "wk", "XML"))
install.packages(c("blob", "caret", "cli", "commonmark", "dbplyr", "dplyr", "dtplyr", "FNN", "gdtools", "ggfortify", "googledrive", "gtable", "hexbin", "hms", "htmlwidgets", "insight", "modelr", "partykit", "pillar", "ps", "rlang", "servr", "sf", "survival", "testthat", "tibble", "truncnorm", "vctrs", "wk", "XML"))
install.packages("vctrs")
install.packages("vctrs")
pkgbuild::find_rtools()
library(rlang)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("vctrs")
plot(c(0, 3), c(0, 3), xlab = "", xaxt = "n", ,ylab = "",yaxt = "n")
plot(c(0, 3), c(0, 3), xlab = "", xaxt = "n", ,ylab = "",yaxt = "n", pch = "")
?segment
lines(c(0, 3), c(1, 1))
lines(c(0, 3), c(2, 2))
lines(c(1, 1), c(0, 3))
lines(c(2, 2), c(0, 3))
plot(c(0, 3), c(0, 3), xlab = "", xaxt = "n", ,ylab = "",yaxt = "n", pch = "")
lines(c(0, 3), c(0, 0))
lines(c(0, 3), c(1, 1))
lines(c(0, 3), c(2, 2))
lines(c(0, 3), c(3, 3))
lines(c(0, 0), c(0, 3))
lines(c(1, 1), c(0, 3))
lines(c(2, 2), c(0, 3))
lines(c(3, 3), c(0, 3))
points(1.5, 1.5, pch = 8)
points(2.5, 2.5, pch = 4)
plot(c(0, 3), c(0, 3), xlab = "", xaxt = "n", ,ylab = "",yaxt = "n", pch = "", bty = "n")
lines(c(0, 3), c(0, 0))
lines(c(0, 3), c(1, 1))
lines(c(0, 3), c(2, 2))
lines(c(0, 3), c(3, 3))
lines(c(0, 0), c(0, 3))
lines(c(1, 1), c(0, 3))
lines(c(2, 2), c(0, 3))
lines(c(3, 3), c(0, 3))
points(1.5, 1.5, pch = 8)
points(2.5, 2.5, pch = 4)
plot(c(-1, 3), c(-1, 3), xlab = "", xaxt = "n", ,ylab = "",yaxt = "n", pch = "", bty = "n")
lines(c(0, 3), c(0, 0))
lines(c(0, 3), c(1, 1))
lines(c(0, 3), c(2, 2))
lines(c(0, 3), c(3, 3))
lines(c(0, 0), c(0, 3))
lines(c(1, 1), c(0, 3))
lines(c(2, 2), c(0, 3))
lines(c(3, 3), c(0, 3))
points(1.5, 1.5, pch = 8)
points(2.5, 2.5, pch = 4)
lines(c(-0.2, -0.2), c(0, 3))
lines(c(-0.3, -0.1), c(0, 0))
lines(c(-0.3, -0.1), c(3, 3))
lines(c(0, 3), c(-0.2, -0.2))
lines(c(0, 0), c(-0.3, -0.1))
lines(c(3, 3), c(-0.3, -0.1))
?text
text(c(-0.4, -0.4), c(1.5, 1.5), "24 in")
text(c(1.5, 1.5), c(-0.4, -0.4), "24 in")
text(c(2.5, 2.5), c(2.5, 2.5), "Randomly Selected Edge Sample")
text(c(2.5, 2.5), c(2.2, 2.2), "Randomly Selected Edge Sample")
plot(c(-1, 3), c(-1, 3), xlab = "", xaxt = "n", ,ylab = "",yaxt = "n", pch = "", bty = "n")
lines(c(0, 3), c(0, 0))
lines(c(0, 3), c(1, 1))
lines(c(0, 3), c(2, 2))
lines(c(0, 3), c(3, 3))
lines(c(0, 0), c(0, 3))
lines(c(1, 1), c(0, 3))
lines(c(2, 2), c(0, 3))
lines(c(3, 3), c(0, 3))
points(1.5, 1.5, pch = 8)
points(2.5, 2.5, pch = 4)
lines(c(-0.2, -0.2), c(0, 3))
lines(c(-0.3, -0.1), c(0, 0))
lines(c(-0.3, -0.1), c(3, 3))
lines(c(0, 3), c(-0.2, -0.2))
lines(c(0, 0), c(-0.3, -0.1))
lines(c(3, 3), c(-0.3, -0.1))
text(c(-0.4, -0.4), c(1.5, 1.5), "24 in")
text(c(1.5, 1.5), c(-0.4, -0.4), "24 in")
text(c(2.5, 2.5), c(2.2, 2.2), "Randomly Selected Edge Sample")
plot(c(-1, 3), c(-1, 3), xlab = "", xaxt = "n", ,ylab = "",yaxt = "n", pch = "", bty = "n")
lines(c(0, 3), c(0, 0))
lines(c(0, 3), c(1, 1))
lines(c(0, 3), c(2, 2))
lines(c(0, 3), c(3, 3))
lines(c(0, 0), c(0, 3))
lines(c(1, 1), c(0, 3))
lines(c(2, 2), c(0, 3))
lines(c(3, 3), c(0, 3))
points(1.5, 1.5, pch = 8)
points(2.5, 2.5, pch = 4)
lines(c(-0.2, -0.2), c(0, 3))
lines(c(-0.3, -0.1), c(0, 0))
lines(c(-0.3, -0.1), c(3, 3))
lines(c(0, 3), c(-0.2, -0.2))
lines(c(0, 0), c(-0.3, -0.1))
lines(c(3, 3), c(-0.3, -0.1))
text(c(-0.4, -0.4), c(1.5, 1.5), "24 in")
text(c(1.5, 1.5), c(-0.4, -0.4), "24 in")
text(c(2.5, 2.5), c(2.2, 2.2), "Randomly\nSelected\nEdge Sample")
library(ggplot2)
plot(c(-1, 3), c(-1, 3), xlab = "", xaxt = "n", ,ylab = "",yaxt = "n", pch = "", bty = "n")
lines(c(0, 3), c(0, 0))
lines(c(0, 3), c(1, 1))
lines(c(0, 3), c(2, 2))
lines(c(0, 3), c(3, 3))
lines(c(0, 0), c(0, 3))
lines(c(1, 1), c(0, 3))
lines(c(2, 2), c(0, 3))
lines(c(3, 3), c(0, 3))
points(1.5, 1.5, pch = 8)
points(2.5, 2.5, pch = 4)
lines(c(-0.2, -0.2), c(0, 3))
lines(c(-0.3, -0.1), c(0, 0))
lines(c(-0.3, -0.1), c(3, 3))
lines(c(0, 3), c(-0.2, -0.2))
lines(c(0, 0), c(-0.3, -0.1))
lines(c(3, 3), c(-0.3, -0.1))
text(c(-0.4, -0.4), c(1.5, 1.5), "24 in")
text(c(1.5, 1.5), c(-0.4, -0.4), "24 in")
text(c(2.5, 2.5), c(2.2, 2.2), "Randomly\nSelected\nEdge Sample", cex = 0.5)
library(ggplot2)
plot(c(-1, 3), c(-1, 3), xlab = "", xaxt = "n", ,ylab = "",yaxt = "n", pch = "", bty = "n")
lines(c(0, 3), c(0, 0))
lines(c(0, 3), c(1, 1))
lines(c(0, 3), c(2, 2))
lines(c(0, 3), c(3, 3))
lines(c(0, 0), c(0, 3))
lines(c(1, 1), c(0, 3))
lines(c(2, 2), c(0, 3))
lines(c(3, 3), c(0, 3))
points(1.5, 1.5, pch = 8, cex = 2)
points(2.5, 2.5, pch = 4, cex = 2)
lines(c(-0.2, -0.2), c(0, 3))
lines(c(-0.3, -0.1), c(0, 0))
lines(c(-0.3, -0.1), c(3, 3))
lines(c(0, 3), c(-0.2, -0.2))
lines(c(0, 0), c(-0.3, -0.1))
lines(c(3, 3), c(-0.3, -0.1))
text(c(-0.4, -0.4), c(1.5, 1.5), "24 in")
text(c(1.5, 1.5), c(-0.4, -0.4), "24 in")
text(c(2.5, 2.5), c(2.2, 2.2), "Randomly\nSelected\nEdge Sample", cex = 0.8)
?dnorm
dnorm(qnorm(0.025))
dnorm(-qnorm(0.025))
pnorm(qnorm(0.025))
pnorm(qnorm(0.975))
(1 +
(qnorm(0.025) * dnorm(qnorm(0.025) - qnorm(0.975) * dnorm(qnorm(0.975))) /
(0.975 - 0.025)))
(dnorm(qnorm(0.025)) - dnorm(qnorm(0.975))
(dnorm(qnorm(0.025)) - dnorm(qnorm(0.975)))
)
dnorm(qnorm(0.025))
dnorm(qnorm(0.975))
(dnorm(qnorm(0.025)) - dnorm(qnorm(0.975))) /
(0.975 - 0.025)
(1 +
(qnorm(0.025) * dnorm(qnorm(0.025) - qnorm(0.975) * dnorm(qnorm(0.975))) /
(0.975 - 0.025)))
((dnorm(qnorm(0.025)) - dnorm(qnorm(0.975))) /
(0.975 - 0.025))^2
(1 +
(qnorm(0.025) * dnorm(qnorm(0.025) - qnorm(0.975) * dnorm(qnorm(0.975))) /
(0.975 - 0.025))) -
((dnorm(qnorm(0.025)) - dnorm(qnorm(0.975))) /
(0.975 - 0.025))^2
infl <-
(1 +
(qnorm(0.025) * dnorm(qnorm(0.025) - qnorm(0.975) * dnorm(qnorm(0.975))) /
(0.975 - 0.025))) -
((dnorm(qnorm(0.025)) - dnorm(qnorm(0.975))) /
(0.975 - 0.025))^2
1/infl
qnorm(0.025) * dnorm(qnorm(0.025)
)
qnorm(0.025) * dnorm(qnorm(0.025))
qnorm(0.975) * dnorm(qnorm(0.975))
(1 +
(qnorm(0.025) * dnorm(qnorm(0.025)) - qnorm(0.975) * dnorm(qnorm(0.975))) /
(0.975 - 0.025))
(qnorm(0.025) * dnorm(qnorm(0.025)) - qnorm(0.975) * dnorm(qnorm(0.975))) /
(0.975 - 0.025))
(qnorm(0.025) * dnorm(qnorm(0.025)) - qnorm(0.975) * dnorm(qnorm(0.975))) /
(0.975 - 0.025)
qnorm(0.025)
dnorm(qnorm(0.025))
qnorm(0.975)
dnorm(qnorm(0.975))
qnorm(0.025) * dnorm(qnorm(0.025))
qnorm(0.975) * dnorm(qnorm(0.975))
(qnorm(0.025) * dnorm(qnorm(0.025)) - qnorm(0.975) * dnorm(qnorm(0.975)))
qnorm(0.025) * dnorm(qnorm(0.025))
qnorm(0.975) * dnorm(qnorm(0.975))
(qnorm(0.025) * dnorm(qnorm(0.025)) - qnorm(0.975) * dnorm(qnorm(0.975)))
((qnorm(0.025) * dnorm(qnorm(0.025))) - (qnorm(0.975) * dnorm(qnorm(0.975))))
dnorm(qnorm(0.975))
(qnorm(0.025) * dnorm(qnorm(0.025)))
(qnorm(0.975) * dnorm(qnorm(0.975))
)
(1 +
((qnorm(0.025) * dnorm(qnorm(0.025))) - (qnorm(0.975) * dnorm(qnorm(0.975)))) /
(0.975 - 0.025))
((dnorm(qnorm(0.025)) - dnorm(qnorm(0.975))) /
(0.975 - 0.025))^2
infl <-
(1 +
((qnorm(0.025) * dnorm(qnorm(0.025))) - (qnorm(0.975) * dnorm(qnorm(0.975)))) /
(0.975 - 0.025))
1/infl
(1 +
((qnorm(0.025) * dnorm(qnorm(0.025))) - (qnorm(0.975) * dnorm(qnorm(0.975)))) /
(0.975 - 0.025)) -
((dnorm(qnorm(0.025)) - dnorm(qnorm(0.975))) /
(0.975 - 0.025))^2
(1 +
((qnorm(0.025) * dnorm(qnorm(0.025))) - (qnorm(0.975) * dnorm(qnorm(0.975)))) /
(0.975 - 0.025))
infl <-
(1 +
((qnorm(0.025) * dnorm(qnorm(0.025))) - (qnorm(0.975) * dnorm(qnorm(0.975)))) /
(0.975 - 0.025))
1/infl
infl <-
(1 +
((qnorm(0.025) * dnorm(qnorm(0.025))) - (qnorm(0.975) * dnorm(qnorm(0.975)))) /
(0.975 - 0.025)) -
((dnorm(qnorm(0.025)) - dnorm(qnorm(0.975))) /
(0.975 - 0.025))^2
1/infl
trim <- 0.025
a <- qnorm(1-trim)
a
x <- seq(-a,a,length.out=10001)
head(x)
tail(x)
x1 <- (x[-10001] + x[-1])/2
head(x1)
tail(x1)
1/(sum(x1^2*dnorm(x1)/(1-2*trim))*(2*a/10000))
(sum(x1^2*dnorm(x1)/(1-2*trim))*(2*a/10000))
var(x)
var(y)
var(x1)
(sum(x1^2*dnorm(x1)/(1-2*trim))*(2*a/10000))
1/0.7588416
?cov
diag(infl, 2, 2)
2+.75+1.5+.75+.25
